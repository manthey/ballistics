import pytest

from ballistics import interpolate


TestData = [
    (1e4, 0.4126), (3.191e4, 0.4542), (7.101e4, 0.4768), (1.472e5, 0.4851),
    (2.302e5, 0.4816), (2.958e5, 0.4614), (3.488e5, 0.3960), (3.954e5, 0.0916),
    (4.21e5, 0.0785), (4.886e5, 0.0892), (7.58e5, 0.1593),
]

Conditions = [
    # Data, x
    (TestData, 7e3),
    (TestData, 2e4),
    (TestData, 5e4),
    (TestData, 1e5),
    (TestData, 9e5),
    (TestData[0:0], 5e4),
    (TestData[0:1], 5e4),
    (TestData[0:2], 5e4),
    (TestData[0:3], 5e4),
    (TestData[0:4], 5e4),
    (TestData[0:5], 5e4),
    (TestData[1:3], 5e4),
    (TestData[1:4], 5e4),
    (TestData[1:5], 5e4),
    (TestData[1:6], 5e4),
    (TestData[2:3], 5e4),
    (TestData[2:4], 5e4),
    (TestData[2:5], 5e4),
    (TestData[2:6], 5e4),
    (TestData[2:7], 5e4),
]

Results = [{
    'method': 'natural',
    'logx': False,
    'results': [
        (0.4072, 0), (0.4332, 1), (0.4692, 1), (0.4831, 1), (0.1904, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4692, 1),
        (0.4692, 1), (0.4647, 1), (0.4662, 1), (0.4657, 1), (0.4657, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4751, 0), (0.4751, 0),
    ]
}, {
    'method': 'natural',
    'logx': True,
    'results': [
        (0.4004, 0), (0.4381, 1), (0.4681, 1), (0.4823, 1), (0.1826, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4681, 1),
        (0.4681, 1), (0.4669, 1), (0.4686, 1), (0.4678, 1), (0.4678, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4752, 0), (0.4752, 0),
    ]
}, {
    'method': 'binatural',
    'logx': False,
    'results': [
        (0.4057, 0), (0.4347, 1), (0.4694, 1), (0.4815, 1), (0.1991, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4695, 1),
        (0.4693, 1), (0.4647, 1), (0.4662, 1), (0.4679, 1), (0.4679, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4739, 0), (0.4737, 0),
    ]
}, {
    'method': 'binatural',
    'logx': True,
    'results': [
        (0.3996, 0), (0.4377, 1), (0.4686, 1), (0.4816, 1), (0.1897, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4685, 1),
        (0.4685, 1), (0.4669, 1), (0.4686, 1), (0.4681, 1), (0.4681, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4723, 0), (0.4721, 0),
    ]
}, {
    'method': 'cubic',
    'logx': False,
    'results': [
        (0.4069, 0), (0.4342, 1), (0.4709, 1), (0.4841, 1), (0.2139, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4709, 1),
        (0.4709, 1), (0.4647, 1), (0.4662, 1), (0.4662, 1), (0.4662, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0),
    ]
}, {
    'method': 'cubic',
    'logx': True,
    'results': [
        (0.3998, 0), (0.4387, 1), (0.4682, 1), (0.4826, 1), (0.2024, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4682, 1),
        (0.4682, 1), (0.4669, 1), (0.4686, 1), (0.4686, 1), (0.4686, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0),
    ]
}, {
    'method': 'parabolic',
    'logx': False,
    'results': [
        (0.4069, 0), (0.4342, 1), (0.4695, 1), (0.4834, 1), (0.2139, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4695, 1),
        (0.4695, 1), (0.4647, 1), (0.4662, 1), (0.4662, 1), (0.4662, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0),
    ]
}, {
    'method': 'parabolic',
    'logx': True,
    'results': [
        (0.3998, 0), (0.4387, 1), (0.4681, 1), (0.4825, 1), (0.2024, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4681, 1),
        (0.4681, 1), (0.4669, 1), (0.4686, 1), (0.4686, 1), (0.4686, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0),
    ]
}, {
    'method': 'hermitic',
    'logx': False,
    'results': [
        (0.4069, 0), (0.4342, 1), (0.4685, 1), (0.4823, 1), (0.2139, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4685, 1),
        (0.4685, 1), (0.4647, 1), (0.4662, 1), (0.4662, 1), (0.4662, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0),
    ]
}, {
    'method': 'hermitic',
    'logx': True,
    'results': [
        (0.3998, 0), (0.4387, 1), (0.4682, 1), (0.4822, 1), (0.2024, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4682, 1),
        (0.4682, 1), (0.4669, 1), (0.4686, 1), (0.4686, 1), (0.4686, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0),
    ]
}, {
    'method': 'tension',
    'logx': False,
    'results': [
        (0.4069, 0), (0.4342, 1), (0.4664, 1), (0.4809, 1), (0.2139, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4664, 1),
        (0.4664, 1), (0.4647, 1), (0.4662, 1), (0.4662, 1), (0.4662, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0),
    ]
}, {
    'method': 'tension',
    'logx': True,
    'results': [
        (0.3998, 0), (0.4387, 1), (0.4679, 1), (0.4814, 1), (0.2024, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4679, 1),
        (0.4679, 1), (0.4669, 1), (0.4686, 1), (0.4686, 1), (0.4686, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0),
    ]
}, {
    'method': 'quadratic',
    'logx': False,
    'results': [
        (0.4053, 0), (0.4342, 1), (0.4729, 1), (0.4855, 1), (0.2139, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4729, 1), (0.4729, 1),
        (0.4729, 1), (0.4647, 1), (0.4662, 1), (0.4662, 1), (0.4662, 1),
        (0.4768, 0), (0.4745, 0), (0.4726, 0), (0.4726, 0), (0.4726, 0),
    ]
}, {
    'method': 'quadratic',
    'logx': True,
    'results': [
        (0.3977, 0), (0.4387, 1), (0.4686, 1), (0.4822, 1), (0.2024, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4675, 1), (0.4686, 1),
        (0.4686, 1), (0.4669, 1), (0.4686, 1), (0.4686, 1), (0.4686, 1),
        (0.4768, 0), (0.4728, 0), (0.4666, 0), (0.4666, 0), (0.4666, 0),
    ]
}, {
    'method': 'linear',
    'logx': False,
    'results': [
        (0.4069, 0), (0.4316, 1), (0.4647, 1), (0.4800, 1), (0.1962, 0),
        (0.0000, 0), (0.4126, 0), (0.4885, 0), (0.4647, 1), (0.4647, 1),
        (0.4647, 1), (0.4647, 1), (0.4647, 1), (0.4647, 1), (0.4647, 1),
        (0.4768, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0), (0.4745, 0),
    ]
}, {
    'method': 'linear',
    'logx': True,
    'results': [
        (0.3998, 0), (0.4375, 1), (0.4669, 1), (0.4807, 1), (0.1867, 0),
        (0.0000, 0), (0.4126, 0), (0.4703, 0), (0.4669, 1), (0.4669, 1),
        (0.4669, 1), (0.4669, 1), (0.4669, 1), (0.4669, 1), (0.4669, 1),
        (0.4768, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0), (0.4728, 0),
    ]
}]


def test_interpolation():
    for entry in Results:
        method = entry['method']
        logx = entry['logx']
        for idx, (data, x) in enumerate(Conditions):
            result = interpolate(x, data, logx, method)
            y, in_range = entry['results'][idx]
            assert result[0] == pytest.approx(y, 0.5e-3)
            assert result[1] == bool(in_range)


def make_results_interpolation():
    Results = []
    for method in ['natural', 'binatural', 'cubic', 'parabolic', 'hermitic',
                   'tension', 'quadratic', 'linear']:
        for logx in (False, True):
            val = []
            for data, x in Conditions:
                result = interpolate(x, data, logx, method)
                val.append('(%6.4f, %1d),' % (result[0], 1 if result[1] else 0))
            results = []
            for idx in range(0, len(val), 5):
                results.append('        ' + (' '.join(val[idx:idx+5])))
            results = '\n'.join(results)
            Results.append(
                '    \'method\': \'%s\',\n    \'logx\': %s,\n    \'results\': [\n%s\n    ]' % (
                    method, logx, results))
    print('Results = [{\n%s\n}]' % ('\n}, {\n'.join(Results)))
